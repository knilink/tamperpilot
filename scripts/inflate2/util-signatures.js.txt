// CTe
var create = Object.create;
// J3
var defineProperty = Object.defineProperty;
// TTe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
// _Te
var getOwnPropertyNames = Object.getOwnPropertyNames;
// ETe
var getPrototypeOf = Object.getPrototypeOf,
  // STe
  hasOwnProperty = Object.prototype.hasOwnProperty;
// wTe
var __throw = (message) => {
  throw TypeError(message);
};
var setProperty = (object, property, value) =>
  property in object
    ? defineProperty(object, property, { enumerable: !0, configurable: !0, writable: !0, value: value })
    : (object[property] = value);
// s
var __name = (object, name) => defineProperty(object, 'name', { value: name, configurable: !0 });
// q
var __esmMin = (func, result) => () => (func && (result = func((func = 0))), result);
// se
var __commonJSMin = (object, module) => () => (
    module || object((module = { exports: {} }).exports, module), module.exports
  ),
  // ITe
  __export = (target, source) => {
    for (var key in source) defineProperty(target, key, { get: source[key], enumerable: !0 });
  },
  // Gte = (e, t, r, n)
  __assign = (target, source, excludeKey, descriptor) => {
    if ((source && typeof source == 'object') || typeof source == 'function')
      for (let key of getOwnPropertyNames(source))
        !hasOwnProperty.call(target, key) &&
          key !== excludeKey &&
          defineProperty(target, key, {
            get: () => source[key],
            enumerable: !(descriptor = getOwnPropertyDescriptor(source, key)) || descriptor.enumerable,
          });
    return target;
  };

// Me(require('foo')) add default export
// Me(require('foo'), 1) skip adding default export
// could be import cjs
// var Me = (e, t, r) => (
var cjsImport = (imported, t, r) => (
    (r = imported != null ? create(getPrototypeOf(imported)) : {}),
    __assign(
      t || !imported || !imported.__esModule ? defineProperty(r, 'default', { value: imported, enumerable: !0 }) : r,
      imported
    )
  ),
  // PTe
  __esModule = (module) => __assign(defineProperty({}, '__esModule', { value: !0 }), module);
// var Oo = (e, t, r)
var __publicField = (object, property, value) =>
    // setProperty(object, typeof property != 'symbol' ? property + '' : property, value), value
    setProperty(object, typeof property != 'symbol' ? property + '' : property, value),
  // YN = (e, t, r)
  // __privateField = (_this, instanceSet, message) => {
  //   if (!instanceSet.has(_this)) throw TypeError('Cannot ' + message);
  // };
  __privateField = (_this, instanceSet, message) => instanceSet.has(_this) || __throw('Cannot ' + message),
  // Kme = (e, t)
  __privateIn = (instanceSet, _this) =>
    Object(_this) !== _this ? __throw('Cannot use the "in" operator on this value') : instanceSet.has(_this);

// var dt = (e, t, r)
var __privateGet = (_this, instanceSet, getter) => (
    __privateField(_this, instanceSet, 'read from private field'), getter ? getter.call(_this) : instanceSet.get(_this)
  ),
  // Nn = (e, t, r) =>
  __privateAdd = (_this, instanceSet, value) =>
    instanceSet.has(_this)
      ? __throw('Cannot add the same private member more than once')
      : instanceSet instanceof WeakSet
        ? instanceSet.add(_this)
        : instanceSet.set(_this, value),
  // pn = (e, t, r, n)
  __privateSet = (_this, instanceSet, value, setter) => (
    __privateField(_this, instanceSet, 'write to private field'),
    setter ? setter.call(_this, value) : instanceSet.set(_this, value),
    value
  );
// var fa = (e, t, r)
var __privateMethod = (_this, instanceSet, fn) => (__privateField(_this, instanceSet, 'access private method'), fn);
